{"version":3,"sources":["Weather.js","serviceWorker.js","index.js"],"names":["require","config","api_key","process","GetData","_callee2","url","res","json","regenerator_default","a","wrap","_context2","prev","next","fetch","sent","ok","Error","statusText","abrupt","t0","stop","this","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","undefined","weather","forecast","setState","icon_url","icon","react_default","createElement","src","className","alt","description","main","temp","pressure","humidity","sys","sunrise","Date","sunset","toLocaleTimeString","UpdateTime","dt","toLocaleString","_this2","list","map","LazyLoad_default","key","height","throttle","offsetVertical","renderTime","renderImage","renderMain","renderForcast","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","Weather","document","getElementById","URL","href","origin","addEventListener","concat","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.061c1641.chunk.js","sourcesContent":["import React from \"react\";\r\nimport LazyLoad from \"react-lazy-load\";\r\nimport \"./styles.css\";\r\n\r\nrequire('dotenv').config()\r\nconst api_key = process.env.REACT_APP_SECRET;\r\n\r\nasync function GetData(url) {\r\n    try {\r\n        const res = await fetch(url);\r\n        if (!res.ok) {\r\n            throw Error(res.statusText);\r\n        }\r\n        const json = await res.json();\r\n        return json;\r\n    } catch (err) {\r\n        throw Error(err);\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: undefined\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (!api_key)\r\n            throw Error(\"Invalid API Key: \" + JSON.stringify(api_key));\r\n        const weather = await GetData(\r\n            \"https://api.openweathermap.org/data/2.5/weather?units=metric&q=Hanoi,VN&appid=\" +\r\n                api_key\r\n        );\r\n        const forecast = await GetData(\r\n            \"https://api.openweathermap.org/data/2.5/forecast?units=metric&q=Hanoi,VN&appid=\" +\r\n                api_key\r\n        );\r\n        this.setState({\r\n            data: weather,\r\n            forecast: forecast\r\n        });\r\n    }\r\n    renderImage(data) {\r\n        let weather = data.weather;\r\n        weather = weather[0];\r\n        let icon_url =\r\n            \"https://openweathermap.org/img/w/\" + weather.icon + \".png\";\r\n        return (\r\n            <div>\r\n                <img\r\n                    src={icon_url}\r\n                    className=\"w_img\"\r\n                    alt={weather.description}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n    renderMain(data) {\r\n        let main = data.main;\r\n        return (\r\n            <div>\r\n                <span className=\"w_text\">Nhiệt độ: {main.temp} ºC</span>\r\n                <span className=\"w_text\">Áp suất: {main.pressure} hpa</span>\r\n                <span className=\"w_text\">Độ ẩm: {main.humidity} %</span>\r\n            </div>\r\n        );\r\n    }\r\n    renderSys(data) {\r\n        let sys = data.sys;\r\n        const sunrise = new Date(sys.sunrise * 1000);\r\n        const sunset = new Date(sys.sunset * 1000);\r\n        return (\r\n            <div>\r\n                <span className=\"w_text\">\r\n                    Bình minh: {sunrise.toLocaleTimeString()}\r\n                </span>\r\n                <span className=\"w_text\">\r\n                    Hoàng hôn: {sunset.toLocaleTimeString()}\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n    renderTime(data) {\r\n        let UpdateTime = new Date(data.dt * 1000).toLocaleString();\r\n        return (\r\n            <div>\r\n                <span className=\"w_text\">{UpdateTime}</span>\r\n            </div>\r\n        );\r\n    }\r\n    renderForcast() {\r\n        const map_w = data => (\r\n            <LazyLoad\r\n                key={\"Load-\" + data.dt}\r\n                height={160}\r\n                throttle={15}\r\n                offsetVertical={500}\r\n            >\r\n                <div className=\"w_div float-up\" key={data.dt}>\r\n                    <h3>{this.renderTime(data)}</h3>\r\n                    {this.renderImage(data)}\r\n                    {this.renderMain(data)}\r\n                </div>\r\n            </LazyLoad>\r\n        );\r\n        let list = this.state.forecast.list.map(map_w);\r\n        return list;\r\n    }\r\n    render() {\r\n        if (!this.state.data) return null;\r\n        if (!this.state.forecast) return null;\r\n        const data = this.state.data;\r\n        return (\r\n            <div>\r\n                <h1 className=\"w_cen float-up\">Weather</h1>\r\n                <div className=\"w_div float-up\">\r\n                    <h3>{this.renderTime(data)}</h3>\r\n                    {this.renderImage(data)}\r\n                    {this.renderMain(data)}\r\n                </div>\r\n                <h2 className=\"w_cen float-up\">Dự báo</h2>\r\n                {this.renderForcast()}\r\n                <h5 className=\"w_cen\">Powered by OpenWeatherMap</h5>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./Weather\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}